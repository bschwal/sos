#!/usr/bin/env python3
# Copyright (c) 2022 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2022 NTESS Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of NTESS Corporation, Open Grid Computing nor
#      the names of any contributors may be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from builtins import str
import datetime as dt
import sys
import argparse
from sosdb import Sos

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SOS container index command")
    actions = parser.add_mutually_exclusive_group(required=True)
    actions.add_argument("-A", "--add", action="store_true",
                         help="Add an index for an attribute.")
    actions.add_argument("-R", "--remove", action="store_true",
                         help="Remove an index from an attribute.")
    actions.add_argument("-Q", "--query", action="store_true",
                         help="Print all of the container's indices.")
    actions.add_argument("-V", "--verify", action="store_true",
                         help="Verify the consistency of one or all indices.")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="If specified once, the partition name containing "
                        "the corrupted index is printed. If specified more than "
                        "once, both the partition name and the index specific "
                        "corruption errors are printed to stdout")
    parser.add_argument("-p", "--path", metavar="PATH", required=True, dest="path",
                        help="The path to the container.")
    parser.add_argument("-n", "--index", metavar="NAME", dest="index_name", default=None,
                        help="Verify only the specified index name.")
    parser.add_argument("-s", "--schema", metavar="NAME", dest="schema_name", default=None,
                        help="The schema name.")
    parser.add_argument("-a", "--attr", metavar="NAME", dest="attr_name", default=None,
                        help="The attribute name.")
    args = parser.parse_args()

    try:
        cont = Sos.Container()
        cont.open(args.path)
    except:
        print(f"The container {args.path} could not be opened.")
        sys.exit(1)

    if args.add:
        attr = None
        schema = None
        if args.schema_name is None:
            printf("The --schema NAME argument is required.")
            sys.exit(1)
        if args.attr_name is None:
            printf("The --attr NAME argument is required.")
            sys.exit(1)
        try:
            schema = cont.schema_by_name(args.schema_name)
            attr = schema.attr_by_name(args.attr_name)
            schema.index_add(attr)
        except Exception as e:
            if not schema:
                print(f"The schema '{args.schema_name}' was not found in the container.")
            elif not attr:
                print(f"The attribute '{args.attr_name}' was not found in the schema '{args.schema_name}'")
            else:
                print(e)

    if args.remove:
        attr = None
        schema = None
        if args.schema_name is None:
            printf("The --schema NAME argument is required.")
            sys.exit(1)
        if args.attr_name is None:
            printf("The --attr NAME argument is required.")
            sys.exit(1)
        try:
            schema = cont.schema_by_name(args.schema_name)
            attr = schema.attr_by_name(args.attr_name)
            schema.index_rem(attr)
        except Exception as e:
            if not schema:
                print(f"The schema '{args.schema_name}' was not found in the container.")
            elif not attr:
                print(f"The attribute '{args.attr_name}' was not found in the schema '{args.schema_name}'")
            else:
                print(e)

    if args.query:
        idx_iter = cont.index_iter()
        for idx in idx_iter:
            print(f"{idx.name()}")
        sys.exit(0)

    if not args.verify:
        sys.exit(0)

    idx_iter = cont.index_iter()
    for idx in idx_iter:
        if args.index_name:
                if args.index_name != idx.name():
                        continue
        print(f"Verifying index '{idx.name()}' ...", end='')
        sys.stdout.flush()
        rc = idx.verify(verbose=args.verbose)
        if rc == 0:
                print(f" OK")
        else:
                print(f" CORRUPTED")
