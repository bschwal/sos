#!/usr/bin/env python3
# Copyright (c) 2014 Open Grid Computing, Inc. All rights reserved.
# Copyright (c) 2019 NTESS Corporation. All rights reserved.
# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# Export of this program may require a license from the United States
# Government.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of NTESS Corporation, Open Grid Computing nor
#      the names of any contributors may be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from builtins import str
import shutil
import sys
import argparse
import os
import pwd
import grp
from sosdb import Sos

def fmt_size(size):
    if size < 1000.0:
        return "{0:8}B".format(int(size))
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}K".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}M".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}G".format(size)
    size /= 1000.0
    if size < 1000.0:
        return "{0:8.1f}T".format(size)
    size /= 1000.0
    return "{0:8.1f}P".format(size)

class Permission:
    translate = {
        0o1   : [ '-', 'x' ],
        0o2   : [ '-', 'w' ],
        0o4   : [ '-', 'r' ],
        0o10  : [ '-', 'x' ],
        0o20  : [ '-', 'w' ],
        0o40  : [ '-', 'r' ],
        0o100 : [ '-', 'x' ],
        0o200 : [ '-', 'w' ],
        0o400 : [ '-', 'r' ]
    }
    def __init__(self, mask):
        self.mask = mask

    def __str__(self):
        s = ''
        for m in self.translate:
            if 0 != (m & self.mask):
                s = self.translate[m][1] + s
            else:
                s = self.translate[m][0] + s
        return s

def print_table(p, hdr=True, ftr=False):
    if hdr:
        print("{0:18} {1:10} {2:5} {3:5} {4:12} {5:10} {6:36} {7}".
                format("Name", "State", "uid", "gid", "Permissions", "Size", "Description", "Path"))
    if hdr or ftr:
        print("{0} {1} {2} {3} {4} {5} {6} {7}".
                format('-'.ljust(18,'-'), '-'.ljust(10,'-'),
                        '-'.ljust(5, '-'), '-'.ljust(5, '-'), '-'.ljust(12, '-'),
                        '-'.ljust(10,'-'), '-'.ljust(36,'-'),
                        '-'.ljust(20,'-')))
    if ftr:
        return

    stat = p.stat()
    uid = p.uid()
    gid = p.gid()
    perm = Permission(p.perm())
    accessed = dt.datetime.fromtimestamp(stat.accessed)
    modified = dt.datetime.fromtimestamp(stat.modified)
    print("{0:18} {1:10} {2:5} {3:5} {4:12} {5:10} {6:36} {7}". \
            format(p.name(), str(p.state()), uid, gid, str(perm),
                    fmt_size(stat.size), p.desc(), p.path()))

def print_json(p, hdr=True, ftr=False):
    if ftr:
        print("]")
        return
    if hdr:
        print("[")
    else:
        print(",")
    stat = p.stat()
    uid = p.uid()
    gid = p.gid()
    perm = p.perm()
    accessed = dt.datetime.fromtimestamp(stat.accessed)
    accessed = accessed.strftime("%m/%d/%y %H:%M:%S")
    modified = dt.datetime.fromtimestamp(stat.modified)
    modified = modified.strftime("%m/%d/%y %H:%M:%S")
    print(f'{{ "name": "{p.name()}, "state" : "{str(p.state())}", '
          f'"uid" : {uid}, "gid" : {gid}, "perm" : {oct(perm)}, '
          f'"access" : "{accessed}", "modified" : "{modified}", '
          f'"size" : "{fmt_size(stat.size)}", "path" : "{p.path()}", '
          f'"description" : "{p.desc()}"}}', end='')

def print_partition(p, hdr=True, ftr=False, fmt='table'):

    if fmt == 'table':
        print_table(p, hdr, ftr)
    else:
        print_json(p, hdr, ftr)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Manage SOSDB partitions.")
    parser.add_argument("--path", metavar="DB-PATH", required=False,
                        help="Specifies the path to the partition.")
    parser.add_argument("--name", metavar="PART-NAME", default=None,
                        help="Specifies the parition name.")
    parser.add_argument("--mode", metavar="MODE", default=None,
                        help="The file access mode if creating a partition")
    parser.add_argument("--user", metavar="USER", default=None,
                        help="The user name or user-id that owns the container")
    parser.add_argument("--group", metavar="GROUP", default=None,
                        help="The group name or group-id that owns the container")
    parser.add_argument("--backend", metavar="BACKEND", default='lsos',
                        help="The desired storage backend, one of: "
                        "'LSOS' (Log Structured Object Store), or "
                        "'MMOS' (Memory Mapped Object Store). "
                        " The default is 'lsos'.")
    parser.add_argument("--desc", default=None,
                        help="A description for the partition.")
    parser.add_argument("--cont", default=None, metavar="PATH",
                        help="The path to the container if attaching or detaching partitions.\n"
                            "If specified with --query, a container's attached partitions are queried.")
    parser.add_argument("--fmt", default='table',
                        help="The desired query output format: 'table', or 'json'.")

    actions = parser.add_mutually_exclusive_group(required=True)
    actions.add_argument("--query", action="store_true",
                        help="Query a partition.")
    actions.add_argument("--create", action="store_true",
                         help="Create a new partition. ")
    actions.add_argument("--state", metavar="STATE-NAME",
                         choices=[ 'primary', 'active', 'offline' ],
                         help="Set the state of a partition.")
    actions.add_argument("--attach", action="store_true",
                         help="Attach a partition to a container.")
    actions.add_argument("--detach", action="store_true",
                         help="Detach a partition from a container.")
    actions.add_argument("--set", action="store_true",
                         help="Set user-id, group-id, and permission bits"
                            "for accessing a partition's contents")

    args = parser.parse_args()

    #
    # Query the partitions
    #
    if args.query:
        import datetime as dt
        if args.cont:
            # Open the database
            cont = Sos.Container()
            try:
                cont.open(args.cont)
            except Exception as ex:
                print(f" The container '{args.cont}' could not be opened.")
                sys.exit(1)
        else:
            cont = None
        if cont:
            pi = cont.part_iter()
            hdr = True
            for p in pi:
                print_partition(p, hdr, fmt=args.fmt)
                hdr = False
            print_partition(p, hdr=False, ftr=True, fmt=args.fmt)
            sys.exit(0)
        try:
            p = Sos.Partition()
            p.open(args.path)
        except Exception as e:
            print(f"The partition '{args.path}' could not be opened.")
            sys.exit(1)
        print_partition(p, fmt=args.fmt)
        sys.exit(0)

    def get_uid(args, default):
        if args.user:
            if type(args.user) == str:
                if args.user.isdigit():
                    uid = int(args.user)
                else:
                    pwe = pwd.getpwnam(args.user)
                    uid = pwe.pw_uid
            else:
                uid = int(args.user)
        else:
            uid = default
        return uid

    def get_gid(args, default):
        if args.group:
            if type(args.group) == str:
                if args.group.isdigit():
                    gid = int(args.group)
                else:
                    gr = grp.getgrnam(args.user)
                    gid = gr.gr_gid
            else:
                gid = int(args.group)
        else:
            gid = default
        return gid

    #
    # Create a partition
    #
    if args.create:
        try:
            if args.backend.upper() == 'LSOS':
                backend = Sos.BE_LSOS
            elif args.backend.upper() == 'MMOS':
                backend = Sos.BE_MMOS
            else:
                print("The storage backend must be 'LSOS' or 'MMOS'.")
                sys.exit(1)
            if args.desc:
                description = args.desc
            else:
                description = None
            if args.user and not args.group:
                print("The user name (--user) must be specified.")
                sys.exit(1)
            part = Sos.Partition()
            if args.mode:
                mode = int(args.mode, base=0)
            else:
                mode = 0o660
            try:
                part.open(args.path,
                    o_perm = Sos.PERM_RW | Sos.PERM_CREAT,
                    o_mode = mode,
                    desc = description, backend = backend)
            except Exception as e:
                print(f"The partition '{args.path}' could not be created.")
                sys.exit(1)

            uid = get_uid(args, os.getuid())
            gid = get_gid(args, os.getgid())
            if args.user or args.group:
                part.chown(uid, gid)
            part.chmod(mode)
        except Exception as ex:
            print("An error was encountered creating the partition.\n{0}".format(ex))
            sys.exit(1)
        sys.exit(0)

    #
    # Change a partition's ownership and access rights
    #
    if args.set:
        part = Sos.Partition()
        try:
            part.open(args.path)
        except Exception as e:
            print(f"The partition '{args.path}' could not be opened.")
            sys.exit(1)
        if args.desc:
            part.desc_set(args.desc)
        uid = get_uid(args, -1)
        gid = get_gid(args, -1)
        if args.user or args.group:
            part.chown(uid, gid)
        if args.mode:
            part.chmod(int(args.mode, base=0))

    #
    # Check the --cont, --path and --name options
    #
    if args.attach or args.detach or args.state:
        if (args.state or args.attach or args.detach) and not args.name:
            print("The partition name (--name NAME) must be specified")
            sys.exit(1)
        if args.attach and not args.path:
            print("The partition path (--path PATH) must be specified with --attach")
            sys.exit(1)
        if not args.cont:
            print("The container option (--cont PATH) must be specified.")
            sys.exit(1)
        # Open the database
        cont = Sos.Container()
        try:
            cont.open(args.cont)
        except Exception as ex:
            print(f"The container '{args.cont}' could not be opened.")
            sys.exit(1)

    #
    # Change the state of a partition
    #
    if args.state:
        part = cont.part_by_name(args.name)
        if not part:
            print(f"The part name '{args.name}' was not found.")
            sys.exit(1)
        try:
            part.state_set(args.state)
        except Exception as ex:
            print(f"The state '{args.state}' could not be set.")
            sys.exit(1)
        sys.exit(0)

    #
    # Attach a partition to a container
    #
    if args.attach:
        part = Sos.Partition()
        try:
            part.open(args.path)
        except:
            print(f"The partition '{args.path}' could not be opened")
            sys.exit(1)
        try:
            part.attach(cont, args.name)
        except:
            print(f"The partition '{args.name}' could not be attached.")
            sys.exit(1)

    #
    # Detach a partition from a container
    #
    if args.detach:
        try:
            cont.part_detach(args.name)
        except:
            print(f"The partition '{args.name}' could not be detached")
            sys.exit(1)
    sys.exit(0)

